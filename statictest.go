// Package statictest runs static analysis tools as go tests.
//
// It is intended to be used as a substitute for an external build
// step that runs tools such as go vet or golint.
//
// Example Usage
//
//    func TestStaticChecks(t *testing.T) {
//    	basic := statictest.Group(
//    		gofmt.Check{},	// Verify that all files are properly formatted
//    		govet.Shadow,	// go vet
//    		golint.Check{},	// golint
//    		gosimple.Check{},	// honnef.co/go/simple
//    		gostaticcheck.Check{},	// honnef.co/go/staticcheck
//    	)
//
//    	// Ignore some lint errors that we're not interested in.
//    	skipper := statictest.SkipRegexpMatch(
//     		"should omit type InterfaceType from declaration of var Handle",
//    		`settings.go:.*can probably use "var res \[\]byte" instead`)
//
//    	basic = statictest.Skip(basic, skipper)
//
//     	// Verify all files under this package recursively.
//    	if err := skipped.Check("./..."); err != nil {
//    		t.Fatal(err)
//    	}
//    }
package statictest

import (
	"reflect"
	"regexp"
	"strings"
)

// Skipper is the interface that wraps the Skip method.
//
// Skip returns true if err is an error that must be ignored.
type Skipper interface {
	Skip(err string) bool
}

// StringSkipper implements Skipper and skips an error if Matcher(err, str) == true for
// any of Strings
type StringSkipper struct {
	Strings []string
	Matcher func(err, str string) bool
}

// Skip returns true if Matcher(check, str) == true for any of Strings.
func (s StringSkipper) Skip(check string) bool {
	for _, str := range s.Strings {
		if s.Matcher(check, str) {
			return true
		}
	}
	return false
}

func skip(check string, skippers []Skipper) bool {
	for _, s := range skippers {
		if s.Skip(check) {
			return true
		}
	}
	return false
}

type errorList []string

func (e errorList) Errors() []string { return []string(e) }
func (e errorList) Error() string    { return strings.Join(e, "\n") }

type errors interface {
	Errors() []string
}

type skipper struct {
	checker  Checker
	skippers []Skipper
}

// Skip returns a Checker that executes checker and filters errors using
// skippers. If checker returns an error that satisfies the below interface
//
//     type errors interface {
//     	Errors() []string
//     }
//
// the filters are applied to each string returned by Errors and then concatenated.
// If the error implements the above interface, it is guaranteed that any returned
// error will also implement the same.
//
// Skippers are run in the order provided and a single
// skipper returning true will result in that error being skipped.
func Skip(checker Checker, skippers ...Skipper) Checker {
	return skipper{checker, skippers}
}

func (s skipper) Check(pkg ...string) error {
	switch err := s.checker.Check(pkg...).(type) {
	case nil:
		return nil
	case errors:
		var n []string
		errs := err.Errors()
		for _, e := range errs {
			if !skip(e, s.skippers) {
				n = append(n, e)
			}
		}
		if len(n) == 0 {
			return nil
		}
		return errorList(n)
	default:
		if skip(err.Error(), s.skippers) {
			return nil
		}
		return err
	}
}

// Checker is the interface that wraps the Check method.
//
// Check performs a static check of all files in pkgs, which may be fully
// qualified import paths, relative import paths or paths with the wildcard
// suffix ...
type Checker interface {
	Check(pkgs ...string) error
}

type group []Checker

// Group returns a Checker that applies each of checkers in the order provided.
//
// The error returned is either nil or contains errors returned by each Checker.
// These are exposed using the errors interface described in Skip and prefixed with the type of the
// Checker that generated the error. For example, the following error generated by govet.Checker:
//
//    file.go:23: err is unintentionally shadowed.
//
// is converted to:
//
//    govet.Checker: file.go:23: err is unintentionally shadowed.
//
// A checker is not shorted-circuited by a previous checker returning an error.
//
// Any error that implements errors is flattened into the final error list.
func Group(checkers ...Checker) Checker {
	return group(checkers)
}

func (g group) Check(pkgs ...string) error {
	var errs []string
	for _, checker := range g {
		name := reflect.TypeOf(checker).String()
		switch err := checker.Check(pkgs...).(type) {
		case nil:
			continue
		case errors:
			cerrs := err.Errors()
			for _, e := range cerrs {
				errs = append(errs, name+": "+e)
			}
		default:
			errs = append(errs, name+": "+err.Error())
		}
	}
	if len(errs) == 0 {
		return nil
	}
	return errorList(errs)
}

// SkipRegexpMatch returns a Skipper that skips all errors which match
// any of the provided regular expression patterns. SkipRegexpMatch expects
// all patterns to be valid regexps and panics otherwise.
func SkipRegexpMatch(regexps ...string) Skipper {
	return StringSkipper{
		Strings: regexps,
		Matcher: func(errstr, pattern string) bool {
			matched, err := regexp.MatchString(pattern, errstr)
			if err != nil {
				panic(err)
			}
			return matched
		},
	}
}
